generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  account_id                  String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  account_name                String?                       @db.VarChar(50)
  email                       String                        @unique @db.VarChar(50)
  account_password            String                        @db.VarChar(60)
  language_id                 Int                           @default(1)
  password_changed_at         DateTime?                     @db.Timestamp(6)
  user_role_id                String                        @default(dbgenerated("'f45e6a3a-1726-4527-8c4c-f4913f291e37'::uuid")) @db.Uuid
  language                    language                      @relation(fields: [language_id], references: [language_id], onDelete: NoAction, onUpdate: NoAction)
  user_role                   user_role                     @relation(fields: [user_role_id], references: [user_role_id], onDelete: NoAction, onUpdate: NoAction)
  account_author_group_follow account_author_group_follow[]
  account_author_group_member account_author_group_member[]
  account_book_follow         account_book_follow[]
  account_chapter_follow      account_chapter_follow[]
  account_genre_follow        account_genre_follow[]
  book_comment                book_comment[]
  chapter_comment             chapter_comment[]
  genre_comment               genre_comment[]
}

model account_author_group_follow {
  account_id      String       @db.Uuid
  author_group_id String       @db.Uuid
  account         account      @relation(fields: [account_id], references: [account_id], onDelete: Cascade, onUpdate: NoAction)
  author_group    author_group @relation(fields: [author_group_id], references: [author_group_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([account_id, author_group_id])
}

model account_author_group_member {
  account_id      String       @db.Uuid
  author_group_id String       @db.Uuid
  account         account      @relation(fields: [account_id], references: [account_id], onDelete: Cascade, onUpdate: NoAction)
  author_group    author_group @relation(fields: [author_group_id], references: [author_group_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([account_id, author_group_id])
}

model account_book_follow {
  account_id String  @db.Uuid
  book_id    String  @db.Uuid
  account    account @relation(fields: [account_id], references: [account_id], onDelete: Cascade, onUpdate: NoAction)
  book       book    @relation(fields: [book_id], references: [book_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([account_id, book_id])
}

model account_chapter_follow {
  account_id String  @db.Uuid
  chapter_id String  @db.Uuid
  account    account @relation(fields: [account_id], references: [account_id], onDelete: Cascade, onUpdate: NoAction)
  chapter    chapter @relation(fields: [chapter_id], references: [chapter_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([account_id, chapter_id])
}

model account_genre_follow {
  account_id       String   @db.Uuid
  genre_id         String   @db.Uuid
  last_followed_on DateTime @default(now()) @db.Timestamp(6)
  account          account  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, onUpdate: NoAction)
  genre            genre    @relation(fields: [genre_id], references: [genre_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([account_id, genre_id])
}

model author_group {
  author_group_id             String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  author_group_name           String?                       @db.VarChar(50)
  author_group_rating         Decimal?                      @db.Decimal(3, 2)
  author_group_image_url      String?                       @db.VarChar(100)
  account_author_group_follow account_author_group_follow[]
  account_author_group_member account_author_group_member[]
  book                        book[]
}

model book {
  book_id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_name                String                @db.VarChar(50)
  author_group_id          String                @db.Uuid
  summary_text             String?               @db.VarChar(200)
  original_book_id         String?               @db.Uuid
  book_image_url           String?               @db.VarChar(100)
  is_copiable              Boolean               @default(false)
  is_published             Boolean               @default(false)
  is_flagged_inappropriate Boolean               @default(false)
  created_on               DateTime              @default(now()) @db.Timestamp(6)
  rating                   Decimal?              @default(0) @db.Decimal(3, 2)
  rating_count             Int?                  @default(0)
  account_book_follow      account_book_follow[]
  author_group             author_group          @relation(fields: [author_group_id], references: [author_group_id], onDelete: Cascade, onUpdate: NoAction)
  book                     book?                 @relation("bookTobook", fields: [original_book_id], references: [book_id], onUpdate: NoAction, map: "book_original_book_fk")
  other_book               book[]                @relation("bookTobook")
  book_comment             book_comment[]
  book_genre               book_genre[]
  chapter                  chapter[]
}

model book_comment {
  book_comment_id   String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_comment_text String  @db.VarChar(255)
  book_rating       Int
  book_id           String  @db.Uuid
  account_id        String  @db.Uuid
  account           account @relation(fields: [account_id], references: [account_id], onDelete: Cascade, onUpdate: NoAction)
  book              book    @relation(fields: [book_id], references: [book_id], onDelete: Cascade, onUpdate: NoAction)
}

model chapter {
  chapter_id             String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chapter_name           String                   @db.VarChar(255)
  chapter_sequence       Int
  chapter_content        String
  chapter_rating         Decimal?                 @db.Decimal(3, 2)
  chapter_image_url      String?                  @db.VarChar(100)
  created_on             DateTime                 @db.Timestamp(6)
  book_id                String                   @db.Uuid
  account_chapter_follow account_chapter_follow[]
  book                   book                     @relation(fields: [book_id], references: [book_id], onDelete: Cascade, onUpdate: NoAction)
  chapter_comment        chapter_comment[]
}

model chapter_comment {
  chapter_comment_id   String  @id @db.Uuid
  chapter_comment_text String  @db.VarChar(255)
  chapter_id           String  @db.Uuid
  account_id           String  @db.Uuid
  account              account @relation(fields: [account_id], references: [account_id], onDelete: Cascade, onUpdate: NoAction)
  chapter              chapter @relation(fields: [chapter_id], references: [chapter_id], onDelete: Cascade, onUpdate: NoAction)
}

model genre {
  genre_id             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  genre_name           String                 @db.VarChar(50)
  genre_image_url      String?                @db.VarChar(100)
  created_on           DateTime               @default(now()) @db.Timestamp(6)
  genre_rating         Decimal?               @db.Decimal(3, 2)
  account_genre_follow account_genre_follow[]
  book_genre           book_genre[]
  genre_comment        genre_comment[]
}

model genre_comment {
  genre_comment_id   String  @id @db.Uuid
  genre_comment_text String  @db.VarChar(255)
  genre_id           String  @db.Uuid
  account_id         String  @db.Uuid
  account            account @relation(fields: [account_id], references: [account_id], onDelete: Cascade, onUpdate: NoAction)
  genre              genre   @relation(fields: [genre_id], references: [genre_id], onDelete: Cascade, onUpdate: NoAction)
}

model user_role {
  user_role_id String    @id @db.Uuid
  name         String    @db.VarChar(6)
  account      account[]
}

model book_genre {
  book_id  String @db.Uuid
  genre_id String @db.Uuid
  book     book   @relation(fields: [book_id], references: [book_id], onDelete: Cascade, onUpdate: NoAction)
  genre    genre  @relation(fields: [genre_id], references: [genre_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([book_id, genre_id])
}

model language {
  language_id   Int       @id
  language_name String    @db.VarChar(100)
  account       account[]
}
